#!/usr/bin/env node

require('dotenv').config();

const app = require('../index'),
  log = require('bunyan').createLogger({ name: 'WWW_'}),
  http = require('http'),
  cluster = require('cluster');

const numWorkers = require('os').cpus().length;
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
log.info(process.env.PORT);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function createServer() {
  /**
   * Create HTTP Server
   */
  const server = http.createServer(app);
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const LOG_TAG = 'createServer_onError ';

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        log.info(`${LOG_TAG} ${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        log.info(`${LOG_TAG} ${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const LOG_TAG = 'createServer_onListening ';
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    log.info(`${LOG_TAG} Process PID: ${process.pid} Server started listening on ${bind}`);
  }
}

function setupCluster() {
  if (!cluster.isMaster) return createServer();
  const LOG_TAG = 'setupCluster ';
  log.info('**************************************************************************');
  log.info(`ENVIRONMENT: ${app.get('env')}`);
  log.info('**************************************************************************');
  log.info(`${LOG_TAG} Master cluster setting up ${numWorkers} workers...`);
  for (let i = 0; i < numWorkers; i++) {
    cluster.fork();
  }
  cluster.on('online', (worker) => {
    log.info(`${LOG_TAG} Worker PID: ${worker.process.pid} is online`);
  });
  cluster.on('exit', (worker, code, signal) => {
    log.info(`${LOG_TAG} Worker ${worker.process.pid} died with code: ${code}, and signal: ${signal}`);
    log.info(`${LOG_TAG} Starting a new worker`);
    cluster.fork();
  });
}

// setupCluster();
createServer();